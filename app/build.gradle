plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    // 启用插件
    id 'com.ttp.and_jacoco'
}

//代码覆盖配置，暂时注释

jacocoCoverageConfig {
    jacocoEnable true //开关
    branchName 'main'.toString()//要对比的分支名
    host="http://10.10.17.105:8080".toString()//下载服务host
    execDir "${project.buildDir.absolutePath}/outputs/coverage".toString()//ec 下载存放路径
    sourceDirectories = getAllJavaDir() //源码路径
    classDirectories = ["${rootProject.projectDir.absolutePath}/app/classes".toString()] //classes 路径
    gitPushShell="${project.projectDir}/shell/gitPushShell.sh" //提交git 命令
    copyClassShell="${project.projectDir}/shell/pullDiffClass.sh" //copy classes 命令
    includes = ['com.andjacoco.demo'.toString()] //要 包含的class 包名
    excludeClass = { // return true 表示要排除的class
//        println("exclude it=${it}")
        return false
    }
    excludeMethod = {//return true 表示要排除此方法
        println("excludeMethod it=${it}")
        return false
    }
}


android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.andjacoco.demo"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "host", "\"http://10.10.17.105:8080\""
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
        incremental = true  //开启增量编译
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    lint {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            // 暂时注释掉
            // buildConfigField "String", "host", "\"${jacocoCoverageConfig.host}\""

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
            // 暂时注释掉
            // buildConfigField "String", "host", "\"${jacocoCoverageConfig.host}\""
        }
    }

    namespace "com.andjacoco.demo"
}

// 暂时注释掉
def ArrayList<String> getAllJavaDir() {
    Set<Project> projects = project.rootProject.subprojects
    List<String> javaDir = new ArrayList<>(projects.size())
    projects.forEach {
        javaDir.add("$it.projectDir/src/main/java")
    }
    return javaDir
}

def isWindows(){
    return System.properties['os.name'].toLowerCase().contains('windows')
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    testImplementation 'junit:junit:4.13.2'

    implementation('org.jacoco:org.jacoco.report:0.8.5') {
        exclude group: 'org.jacoco', module: 'org.jacoco.core'
    }

    // 使用本地模块而不是远程引用
    debugImplementation project(path: ':rt')
    releaseImplementation project(path: ':rt-no-op')
}